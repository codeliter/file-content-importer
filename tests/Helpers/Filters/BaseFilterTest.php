<?php
declare(strict_types=1);

namespace Tests\Helpers\Filters;

use App\Helpers\Filters\BaseFilter;
use App\Helpers\Filters\Exceptions\InvalidFilterRecordsException;
use App\Helpers\Filters\Exceptions\InvalidFilterRuleException;
use App\Helpers\Filters\Exceptions\InvalidFilterRuleRecordException;
use Tests\TestCase;

/**
 * Class BaseFilterTest
 * @package Tests\Helpers\Filters
 * @author  Abolarin Stephen <hackzlord@gmail.com>
 */
class BaseFilterTest extends TestCase
{
    public function test__invoke()
    {
        $base = $this->getBaseFilter();
        $this->assertIsCallable($base);
    }

    /**
     * @return BaseFilter
     */
    private function getBaseFilter(): BaseFilter
    {
        return new class extends BaseFilter {

        };
    }

    public function test__invoke_throws_invalid_filter_rule()
    {
        $base = new class extends BaseFilter {
            public function rules(): array
            {
                return [
                    'hello' => "jjfjfj"
                ]; // TODO: Change the autogenerated stub
            }
        };
        $this->expectException(InvalidFilterRuleException::class);
        $base(['hello']);
    }

    public function test__invoke_throws_invalid_filter_rule_record_rule()
    {
        $base = new class extends BaseFilter {
            public function rules(): array
            {
                return [
                    'hello' => function ($val): bool {
                        return true;
                    }
                ]; // TODO: Change the autogenerated stub
            }
        };
        $this->expectException(InvalidFilterRuleRecordException::class);
        $base(['hfhf' => 'jjdjd']);
    }

    public function test__invoke_throws_invalid_filter_records()
    {
        $base = new class extends BaseFilter {
            public function rules(): array
            {
                return [
                    'hello' => function ($val): bool {
                        return true;
                    }
                ]; // TODO: Change the autogenerated stub
            }
        };
        $this->expectException(InvalidFilterRecordsException::class);
        $base([]);
    }

    public function testPassed()
    {
        $base = $this->getBaseFilter();
        $base([]);
        $this->assertEquals(true, $base->passed());
    }

    public function testRules()
    {
        $base = new class extends BaseFilter {
            public function rules(): array
            {
                return [
                    'hello' => function (): bool {
                        return true;
                    }
                ]; // TODO: Change the autogenerated stub
            }
        };

        $this->assertContains('hello', array_keys($base->rules()));
        foreach ($base->rules() as $rule) {
            $this->assertInstanceOf(\Closure::class, $rule);
        }
    }
}
